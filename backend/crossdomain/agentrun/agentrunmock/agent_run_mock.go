/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: agent_run.go
//
// Generated by this command:
//
//	mockgen -destination agentrunmock/agent_run_mock.go --package agentrunmock -source agent_run.go
//

// Package agentrunmock is a generated GoMock package.
package agentrunmock

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-studio/backend/domain/conversation/agentrun/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockAgentRun is a mock of AgentRun interface.
type MockAgentRun struct {
	ctrl     *gomock.Controller
	recorder *MockAgentRunMockRecorder
	isgomock struct{}
}

// MockAgentRunMockRecorder is the mock recorder for MockAgentRun.
type MockAgentRunMockRecorder struct {
	mock *MockAgentRun
}

// NewMockAgentRun creates a new mock instance.
func NewMockAgentRun(ctrl *gomock.Controller) *MockAgentRun {
	mock := &MockAgentRun{ctrl: ctrl}
	mock.recorder = &MockAgentRunMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentRun) EXPECT() *MockAgentRunMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAgentRun) Create(ctx context.Context, runRecord *entity.AgentRunMeta) (*entity.RunRecordMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, runRecord)
	ret0, _ := ret[0].(*entity.RunRecordMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAgentRunMockRecorder) Create(ctx, runRecord any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAgentRun)(nil).Create), ctx, runRecord)
}

// Delete mocks base method.
func (m *MockAgentRun) Delete(ctx context.Context, runID []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, runID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAgentRunMockRecorder) Delete(ctx, runID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAgentRun)(nil).Delete), ctx, runID)
}

// List mocks base method.
func (m *MockAgentRun) List(ctx context.Context, ListMeta *entity.ListRunRecordMeta) ([]*entity.RunRecordMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, ListMeta)
	ret0, _ := ret[0].([]*entity.RunRecordMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAgentRunMockRecorder) List(ctx, ListMeta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAgentRun)(nil).List), ctx, ListMeta)
}
