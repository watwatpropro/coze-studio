// Code generated by MockGen. DO NOT EDIT.
// Source: knowledge.go
//
// Generated by this command:
//
//	mockgen -destination knowledgemock/knowledge_mock.go --package knowledgemock -source knowledge.go
//

// Package knowledgemock is a generated GoMock package.
package knowledgemock

import (
	context "context"
	reflect "reflect"

	knowledge "github.com/coze-dev/coze-studio/backend/crossdomain/knowledge/model"
	gomock "go.uber.org/mock/gomock"
)

// MockKnowledge is a mock of Knowledge interface.
type MockKnowledge struct {
	ctrl     *gomock.Controller
	recorder *MockKnowledgeMockRecorder
	isgomock struct{}
}

// MockKnowledgeMockRecorder is the mock recorder for MockKnowledge.
type MockKnowledgeMockRecorder struct {
	mock *MockKnowledge
}

// NewMockKnowledge creates a new mock instance.
func NewMockKnowledge(ctrl *gomock.Controller) *MockKnowledge {
	mock := &MockKnowledge{ctrl: ctrl}
	mock.recorder = &MockKnowledgeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKnowledge) EXPECT() *MockKnowledgeMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockKnowledge) Delete(ctx context.Context, r *knowledge.DeleteDocumentRequest) (*knowledge.DeleteDocumentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, r)
	ret0, _ := ret[0].(*knowledge.DeleteDocumentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockKnowledgeMockRecorder) Delete(ctx, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKnowledge)(nil).Delete), ctx, r)
}

// DeleteKnowledge mocks base method.
func (m *MockKnowledge) DeleteKnowledge(ctx context.Context, request *knowledge.DeleteKnowledgeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKnowledge", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKnowledge indicates an expected call of DeleteKnowledge.
func (mr *MockKnowledgeMockRecorder) DeleteKnowledge(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKnowledge", reflect.TypeOf((*MockKnowledge)(nil).DeleteKnowledge), ctx, request)
}

// GetKnowledgeByID mocks base method.
func (m *MockKnowledge) GetKnowledgeByID(ctx context.Context, request *knowledge.GetKnowledgeByIDRequest) (*knowledge.GetKnowledgeByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKnowledgeByID", ctx, request)
	ret0, _ := ret[0].(*knowledge.GetKnowledgeByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKnowledgeByID indicates an expected call of GetKnowledgeByID.
func (mr *MockKnowledgeMockRecorder) GetKnowledgeByID(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKnowledgeByID", reflect.TypeOf((*MockKnowledge)(nil).GetKnowledgeByID), ctx, request)
}

// ListKnowledge mocks base method.
func (m *MockKnowledge) ListKnowledge(ctx context.Context, request *knowledge.ListKnowledgeRequest) (*knowledge.ListKnowledgeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKnowledge", ctx, request)
	ret0, _ := ret[0].(*knowledge.ListKnowledgeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKnowledge indicates an expected call of ListKnowledge.
func (mr *MockKnowledgeMockRecorder) ListKnowledge(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKnowledge", reflect.TypeOf((*MockKnowledge)(nil).ListKnowledge), ctx, request)
}

// ListKnowledgeDetail mocks base method.
func (m *MockKnowledge) ListKnowledgeDetail(ctx context.Context, req *knowledge.ListKnowledgeDetailRequest) (*knowledge.ListKnowledgeDetailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKnowledgeDetail", ctx, req)
	ret0, _ := ret[0].(*knowledge.ListKnowledgeDetailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKnowledgeDetail indicates an expected call of ListKnowledgeDetail.
func (mr *MockKnowledgeMockRecorder) ListKnowledgeDetail(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKnowledgeDetail", reflect.TypeOf((*MockKnowledge)(nil).ListKnowledgeDetail), ctx, req)
}

// MGetKnowledgeByID mocks base method.
func (m *MockKnowledge) MGetKnowledgeByID(ctx context.Context, request *knowledge.MGetKnowledgeByIDRequest) (*knowledge.MGetKnowledgeByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetKnowledgeByID", ctx, request)
	ret0, _ := ret[0].(*knowledge.MGetKnowledgeByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetKnowledgeByID indicates an expected call of MGetKnowledgeByID.
func (mr *MockKnowledgeMockRecorder) MGetKnowledgeByID(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetKnowledgeByID", reflect.TypeOf((*MockKnowledge)(nil).MGetKnowledgeByID), ctx, request)
}

// Retrieve mocks base method.
func (m *MockKnowledge) Retrieve(ctx context.Context, req *knowledge.RetrieveRequest) (*knowledge.RetrieveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", ctx, req)
	ret0, _ := ret[0].(*knowledge.RetrieveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockKnowledgeMockRecorder) Retrieve(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockKnowledge)(nil).Retrieve), ctx, req)
}

// Store mocks base method.
func (m *MockKnowledge) Store(ctx context.Context, document *knowledge.CreateDocumentRequest) (*knowledge.CreateDocumentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, document)
	ret0, _ := ret[0].(*knowledge.CreateDocumentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockKnowledgeMockRecorder) Store(ctx, document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockKnowledge)(nil).Store), ctx, document)
}
