/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: domain/agent/singleagent/service/single_agent.go
//
// Generated by this command:
//
//	mockgen -destination internal/mock/domain/agent/singleagent/single_agent_mock.go --package mock -source domain/agent/singleagent/service/single_agent.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	schema "github.com/cloudwego/eino/schema"
	playground "github.com/coze-dev/coze-studio/backend/api/model/playground"
	entity "github.com/coze-dev/coze-studio/backend/domain/agent/singleagent/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockSingleAgent is a mock of SingleAgent interface.
type MockSingleAgent struct {
	ctrl     *gomock.Controller
	recorder *MockSingleAgentMockRecorder
	isgomock struct{}
}

// MockSingleAgentMockRecorder is the mock recorder for MockSingleAgent.
type MockSingleAgentMockRecorder struct {
	mock *MockSingleAgent
}

// NewMockSingleAgent creates a new mock instance.
func NewMockSingleAgent(ctrl *gomock.Controller) *MockSingleAgent {
	mock := &MockSingleAgent{ctrl: ctrl}
	mock.recorder = &MockSingleAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSingleAgent) EXPECT() *MockSingleAgentMockRecorder {
	return m.recorder
}

// CreateSingleAgent mocks base method.
func (m *MockSingleAgent) CreateSingleAgent(ctx context.Context, connectorID int64, version string, e *entity.SingleAgent) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSingleAgent", ctx, connectorID, version, e)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSingleAgent indicates an expected call of CreateSingleAgent.
func (mr *MockSingleAgentMockRecorder) CreateSingleAgent(ctx, connectorID, version, e any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSingleAgent", reflect.TypeOf((*MockSingleAgent)(nil).CreateSingleAgent), ctx, connectorID, version, e)
}

// CreateSingleAgentDraft mocks base method.
func (m *MockSingleAgent) CreateSingleAgentDraft(ctx context.Context, creatorID int64, draft *entity.SingleAgent) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSingleAgentDraft", ctx, creatorID, draft)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSingleAgentDraft indicates an expected call of CreateSingleAgentDraft.
func (mr *MockSingleAgentMockRecorder) CreateSingleAgentDraft(ctx, creatorID, draft any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSingleAgentDraft", reflect.TypeOf((*MockSingleAgent)(nil).CreateSingleAgentDraft), ctx, creatorID, draft)
}

// CreateSingleAgentDraftWithID mocks base method.
func (m *MockSingleAgent) CreateSingleAgentDraftWithID(ctx context.Context, creatorID, agentID int64, draft *entity.SingleAgent) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSingleAgentDraftWithID", ctx, creatorID, agentID, draft)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSingleAgentDraftWithID indicates an expected call of CreateSingleAgentDraftWithID.
func (mr *MockSingleAgentMockRecorder) CreateSingleAgentDraftWithID(ctx, creatorID, agentID, draft any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSingleAgentDraftWithID", reflect.TypeOf((*MockSingleAgent)(nil).CreateSingleAgentDraftWithID), ctx, creatorID, agentID, draft)
}

// DeleteAgentDraft mocks base method.
func (m *MockSingleAgent) DeleteAgentDraft(ctx context.Context, spaceID, agentID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAgentDraft", ctx, spaceID, agentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAgentDraft indicates an expected call of DeleteAgentDraft.
func (mr *MockSingleAgentMockRecorder) DeleteAgentDraft(ctx, spaceID, agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAgentDraft", reflect.TypeOf((*MockSingleAgent)(nil).DeleteAgentDraft), ctx, spaceID, agentID)
}

// DuplicateInMemory mocks base method.
func (m *MockSingleAgent) DuplicateInMemory(ctx context.Context, req *entity.DuplicateInfo) (*entity.SingleAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DuplicateInMemory", ctx, req)
	ret0, _ := ret[0].(*entity.SingleAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DuplicateInMemory indicates an expected call of DuplicateInMemory.
func (mr *MockSingleAgentMockRecorder) DuplicateInMemory(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DuplicateInMemory", reflect.TypeOf((*MockSingleAgent)(nil).DuplicateInMemory), ctx, req)
}

// GetAgentDraftDisplayInfo mocks base method.
func (m *MockSingleAgent) GetAgentDraftDisplayInfo(ctx context.Context, userID, agentID int64) (*entity.AgentDraftDisplayInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentDraftDisplayInfo", ctx, userID, agentID)
	ret0, _ := ret[0].(*entity.AgentDraftDisplayInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentDraftDisplayInfo indicates an expected call of GetAgentDraftDisplayInfo.
func (mr *MockSingleAgentMockRecorder) GetAgentDraftDisplayInfo(ctx, userID, agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentDraftDisplayInfo", reflect.TypeOf((*MockSingleAgent)(nil).GetAgentDraftDisplayInfo), ctx, userID, agentID)
}

// GetAgentPopupCount mocks base method.
func (m *MockSingleAgent) GetAgentPopupCount(ctx context.Context, uid, agentID int64, agentPopupType playground.BotPopupType) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentPopupCount", ctx, uid, agentID, agentPopupType)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentPopupCount indicates an expected call of GetAgentPopupCount.
func (mr *MockSingleAgentMockRecorder) GetAgentPopupCount(ctx, uid, agentID, agentPopupType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentPopupCount", reflect.TypeOf((*MockSingleAgent)(nil).GetAgentPopupCount), ctx, uid, agentID, agentPopupType)
}

// GetPublishConnectorList mocks base method.
func (m *MockSingleAgent) GetPublishConnectorList(ctx context.Context, agentID int64) (*entity.PublishConnectorData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublishConnectorList", ctx, agentID)
	ret0, _ := ret[0].(*entity.PublishConnectorData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublishConnectorList indicates an expected call of GetPublishConnectorList.
func (mr *MockSingleAgentMockRecorder) GetPublishConnectorList(ctx, agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublishConnectorList", reflect.TypeOf((*MockSingleAgent)(nil).GetPublishConnectorList), ctx, agentID)
}

// GetPublishedInfo mocks base method.
func (m *MockSingleAgent) GetPublishedInfo(ctx context.Context, agentID int64) (*entity.PublishInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublishedInfo", ctx, agentID)
	ret0, _ := ret[0].(*entity.PublishInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublishedInfo indicates an expected call of GetPublishedInfo.
func (mr *MockSingleAgentMockRecorder) GetPublishedInfo(ctx, agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublishedInfo", reflect.TypeOf((*MockSingleAgent)(nil).GetPublishedInfo), ctx, agentID)
}

// GetPublishedTime mocks base method.
func (m *MockSingleAgent) GetPublishedTime(ctx context.Context, agentID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublishedTime", ctx, agentID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublishedTime indicates an expected call of GetPublishedTime.
func (mr *MockSingleAgentMockRecorder) GetPublishedTime(ctx, agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublishedTime", reflect.TypeOf((*MockSingleAgent)(nil).GetPublishedTime), ctx, agentID)
}

// GetSingleAgent mocks base method.
func (m *MockSingleAgent) GetSingleAgent(ctx context.Context, agentID int64, version string) (*entity.SingleAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleAgent", ctx, agentID, version)
	ret0, _ := ret[0].(*entity.SingleAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingleAgent indicates an expected call of GetSingleAgent.
func (mr *MockSingleAgentMockRecorder) GetSingleAgent(ctx, agentID, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleAgent", reflect.TypeOf((*MockSingleAgent)(nil).GetSingleAgent), ctx, agentID, version)
}

// GetSingleAgentDraft mocks base method.
func (m *MockSingleAgent) GetSingleAgentDraft(ctx context.Context, agentID int64) (*entity.SingleAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleAgentDraft", ctx, agentID)
	ret0, _ := ret[0].(*entity.SingleAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingleAgentDraft indicates an expected call of GetSingleAgentDraft.
func (mr *MockSingleAgentMockRecorder) GetSingleAgentDraft(ctx, agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleAgentDraft", reflect.TypeOf((*MockSingleAgent)(nil).GetSingleAgentDraft), ctx, agentID)
}

// IncrAgentPopupCount mocks base method.
func (m *MockSingleAgent) IncrAgentPopupCount(ctx context.Context, uid, agentID int64, agentPopupType playground.BotPopupType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrAgentPopupCount", ctx, uid, agentID, agentPopupType)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrAgentPopupCount indicates an expected call of IncrAgentPopupCount.
func (mr *MockSingleAgentMockRecorder) IncrAgentPopupCount(ctx, uid, agentID, agentPopupType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrAgentPopupCount", reflect.TypeOf((*MockSingleAgent)(nil).IncrAgentPopupCount), ctx, uid, agentID, agentPopupType)
}

// ListAgentPublishHistory mocks base method.
func (m *MockSingleAgent) ListAgentPublishHistory(ctx context.Context, agentID int64, pageIndex, pageSize int32, connectorID *int64) ([]*entity.SingleAgentPublish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgentPublishHistory", ctx, agentID, pageIndex, pageSize, connectorID)
	ret0, _ := ret[0].([]*entity.SingleAgentPublish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgentPublishHistory indicates an expected call of ListAgentPublishHistory.
func (mr *MockSingleAgentMockRecorder) ListAgentPublishHistory(ctx, agentID, pageIndex, pageSize, connectorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentPublishHistory", reflect.TypeOf((*MockSingleAgent)(nil).ListAgentPublishHistory), ctx, agentID, pageIndex, pageSize, connectorID)
}

// MGetSingleAgentDraft mocks base method.
func (m *MockSingleAgent) MGetSingleAgentDraft(ctx context.Context, agentIDs []int64) ([]*entity.SingleAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetSingleAgentDraft", ctx, agentIDs)
	ret0, _ := ret[0].([]*entity.SingleAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetSingleAgentDraft indicates an expected call of MGetSingleAgentDraft.
func (mr *MockSingleAgentMockRecorder) MGetSingleAgentDraft(ctx, agentIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetSingleAgentDraft", reflect.TypeOf((*MockSingleAgent)(nil).MGetSingleAgentDraft), ctx, agentIDs)
}

// ObtainAgentByIdentity mocks base method.
func (m *MockSingleAgent) ObtainAgentByIdentity(ctx context.Context, identity *entity.AgentIdentity) (*entity.SingleAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObtainAgentByIdentity", ctx, identity)
	ret0, _ := ret[0].(*entity.SingleAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObtainAgentByIdentity indicates an expected call of ObtainAgentByIdentity.
func (mr *MockSingleAgentMockRecorder) ObtainAgentByIdentity(ctx, identity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObtainAgentByIdentity", reflect.TypeOf((*MockSingleAgent)(nil).ObtainAgentByIdentity), ctx, identity)
}

// SavePublishRecord mocks base method.
func (m *MockSingleAgent) SavePublishRecord(ctx context.Context, p *entity.SingleAgentPublish, e *entity.SingleAgent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePublishRecord", ctx, p, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePublishRecord indicates an expected call of SavePublishRecord.
func (mr *MockSingleAgentMockRecorder) SavePublishRecord(ctx, p, e any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePublishRecord", reflect.TypeOf((*MockSingleAgent)(nil).SavePublishRecord), ctx, p, e)
}

// StreamExecute mocks base method.
func (m *MockSingleAgent) StreamExecute(ctx context.Context, req *entity.ExecuteRequest) (*schema.StreamReader[*entity.AgentEvent], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamExecute", ctx, req)
	ret0, _ := ret[0].(*schema.StreamReader[*entity.AgentEvent])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamExecute indicates an expected call of StreamExecute.
func (mr *MockSingleAgentMockRecorder) StreamExecute(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamExecute", reflect.TypeOf((*MockSingleAgent)(nil).StreamExecute), ctx, req)
}

// UpdateAgentDraftDisplayInfo mocks base method.
func (m *MockSingleAgent) UpdateAgentDraftDisplayInfo(ctx context.Context, userID int64, e *entity.AgentDraftDisplayInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentDraftDisplayInfo", ctx, userID, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgentDraftDisplayInfo indicates an expected call of UpdateAgentDraftDisplayInfo.
func (mr *MockSingleAgentMockRecorder) UpdateAgentDraftDisplayInfo(ctx, userID, e any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentDraftDisplayInfo", reflect.TypeOf((*MockSingleAgent)(nil).UpdateAgentDraftDisplayInfo), ctx, userID, e)
}

// UpdateSingleAgentDraft mocks base method.
func (m *MockSingleAgent) UpdateSingleAgentDraft(ctx context.Context, agentInfo *entity.SingleAgent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSingleAgentDraft", ctx, agentInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSingleAgentDraft indicates an expected call of UpdateSingleAgentDraft.
func (mr *MockSingleAgentMockRecorder) UpdateSingleAgentDraft(ctx, agentInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSingleAgentDraft", reflect.TypeOf((*MockSingleAgent)(nil).UpdateSingleAgentDraft), ctx, agentInfo)
}
