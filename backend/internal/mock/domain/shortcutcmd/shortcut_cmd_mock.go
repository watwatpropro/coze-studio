/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: domain/shortcutcmd/service/shortcut_cmd.go
//
// Generated by this command:
//
//	mockgen -destination internal/mock/domain/shortcutcmd/shortcut_cmd_mock.go --package mock_shortcutcmd -source domain/shortcutcmd/service/shortcut_cmd.go
//

// Package mock_shortcutcmd is a generated GoMock package.
package mock_shortcutcmd

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-studio/backend/domain/shortcutcmd/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockShortcutCmd is a mock of ShortcutCmd interface.
type MockShortcutCmd struct {
	ctrl     *gomock.Controller
	recorder *MockShortcutCmdMockRecorder
	isgomock struct{}
}

// MockShortcutCmdMockRecorder is the mock recorder for MockShortcutCmd.
type MockShortcutCmdMockRecorder struct {
	mock *MockShortcutCmd
}

// NewMockShortcutCmd creates a new mock instance.
func NewMockShortcutCmd(ctrl *gomock.Controller) *MockShortcutCmd {
	mock := &MockShortcutCmd{ctrl: ctrl}
	mock.recorder = &MockShortcutCmdMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortcutCmd) EXPECT() *MockShortcutCmdMockRecorder {
	return m.recorder
}

// CreateCMD mocks base method.
func (m *MockShortcutCmd) CreateCMD(ctx context.Context, shortcut *entity.ShortcutCmd) (*entity.ShortcutCmd, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCMD", ctx, shortcut)
	ret0, _ := ret[0].(*entity.ShortcutCmd)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCMD indicates an expected call of CreateCMD.
func (mr *MockShortcutCmdMockRecorder) CreateCMD(ctx, shortcut any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCMD", reflect.TypeOf((*MockShortcutCmd)(nil).CreateCMD), ctx, shortcut)
}

// GetByCmdID mocks base method.
func (m *MockShortcutCmd) GetByCmdID(ctx context.Context, cmdID int64, isOnline int32) (*entity.ShortcutCmd, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCmdID", ctx, cmdID, isOnline)
	ret0, _ := ret[0].(*entity.ShortcutCmd)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCmdID indicates an expected call of GetByCmdID.
func (mr *MockShortcutCmdMockRecorder) GetByCmdID(ctx, cmdID, isOnline any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCmdID", reflect.TypeOf((*MockShortcutCmd)(nil).GetByCmdID), ctx, cmdID, isOnline)
}

// ListCMD mocks base method.
func (m *MockShortcutCmd) ListCMD(ctx context.Context, lm *entity.ListMeta) ([]*entity.ShortcutCmd, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCMD", ctx, lm)
	ret0, _ := ret[0].([]*entity.ShortcutCmd)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCMD indicates an expected call of ListCMD.
func (mr *MockShortcutCmdMockRecorder) ListCMD(ctx, lm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCMD", reflect.TypeOf((*MockShortcutCmd)(nil).ListCMD), ctx, lm)
}

// PublishCMDs mocks base method.
func (m *MockShortcutCmd) PublishCMDs(ctx context.Context, objID int64, cmdIDs []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishCMDs", ctx, objID, cmdIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishCMDs indicates an expected call of PublishCMDs.
func (mr *MockShortcutCmdMockRecorder) PublishCMDs(ctx, objID, cmdIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishCMDs", reflect.TypeOf((*MockShortcutCmd)(nil).PublishCMDs), ctx, objID, cmdIDs)
}

// UpdateCMD mocks base method.
func (m *MockShortcutCmd) UpdateCMD(ctx context.Context, shortcut *entity.ShortcutCmd) (*entity.ShortcutCmd, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCMD", ctx, shortcut)
	ret0, _ := ret[0].(*entity.ShortcutCmd)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCMD indicates an expected call of UpdateCMD.
func (mr *MockShortcutCmdMockRecorder) UpdateCMD(ctx, shortcut any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCMD", reflect.TypeOf((*MockShortcutCmd)(nil).UpdateCMD), ctx, shortcut)
}
