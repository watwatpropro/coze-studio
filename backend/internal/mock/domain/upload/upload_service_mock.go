/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: domain/upload/service/interface.go
//
// Generated by this command:
//
//	mockgen -destination internal/mock/domain/upload/upload_service_mock.go --package mock_upload -source domain/upload/service/interface.go UploadService
//

// Package mock_upload is a generated GoMock package.
package mock_upload

import (
	context "context"
	reflect "reflect"

	service "github.com/coze-dev/coze-studio/backend/domain/upload/service"
	gomock "go.uber.org/mock/gomock"
)

// MockUploadService is a mock of UploadService interface.
type MockUploadService struct {
	ctrl     *gomock.Controller
	recorder *MockUploadServiceMockRecorder
	isgomock struct{}
}

// MockUploadServiceMockRecorder is the mock recorder for MockUploadService.
type MockUploadServiceMockRecorder struct {
	mock *MockUploadService
}

// NewMockUploadService creates a new mock instance.
func NewMockUploadService(ctrl *gomock.Controller) *MockUploadService {
	mock := &MockUploadService{ctrl: ctrl}
	mock.recorder = &MockUploadServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploadService) EXPECT() *MockUploadServiceMockRecorder {
	return m.recorder
}

// GetFile mocks base method.
func (m *MockUploadService) GetFile(ctx context.Context, req *service.GetFileRequest) (*service.GetFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", ctx, req)
	ret0, _ := ret[0].(*service.GetFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockUploadServiceMockRecorder) GetFile(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockUploadService)(nil).GetFile), ctx, req)
}

// GetFiles mocks base method.
func (m *MockUploadService) GetFiles(ctx context.Context, req *service.GetFilesRequest) (*service.GetFilesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFiles", ctx, req)
	ret0, _ := ret[0].(*service.GetFilesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFiles indicates an expected call of GetFiles.
func (mr *MockUploadServiceMockRecorder) GetFiles(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiles", reflect.TypeOf((*MockUploadService)(nil).GetFiles), ctx, req)
}

// UploadFile mocks base method.
func (m *MockUploadService) UploadFile(ctx context.Context, req *service.UploadFileRequest) (*service.UploadFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, req)
	ret0, _ := ret[0].(*service.UploadFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockUploadServiceMockRecorder) UploadFile(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockUploadService)(nil).UploadFile), ctx, req)
}

// UploadFiles mocks base method.
func (m *MockUploadService) UploadFiles(ctx context.Context, req *service.UploadFilesRequest) (*service.UploadFilesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFiles", ctx, req)
	ret0, _ := ret[0].(*service.UploadFilesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFiles indicates an expected call of UploadFiles.
func (mr *MockUploadServiceMockRecorder) UploadFiles(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFiles", reflect.TypeOf((*MockUploadService)(nil).UploadFiles), ctx, req)
}
